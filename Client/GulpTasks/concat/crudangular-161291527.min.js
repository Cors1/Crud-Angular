(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.Blocks', [
            'toaster',
			'ngAnimate'
        ]);

})();	
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.Blocks')
		.factory('CRUD.AngularPrj.Blocks.Utils.UtilsFactory', UtilsFactory);

	UtilsFactory.$inject = [
		'toaster'
	];
	
	function UtilsFactory(toaster)
	{
		var service = {
            ShowSuccessMessage: ShowSuccessMessage,
            ShowErrorMessage: ShowErrorMessage
        };
		
        return service;

		//############ Public Functions ###################

        function ShowSuccessMessage(successMessage)
        {
            var paramsObj = {
                Message: successMessage,
                MessageType: 'success',
                MessageTitle: 'Success'
            };
        }

        function ShowErrorMessage(errorMessage)
        {
            var paramsObj = {
                Message: errorMessage,
                MessageType: 'error',
                MessageTitle: 'Error'
            };
        }

		//############ Private Functions ###################

        function ShowToasterMessage(paramsObj)
        {
            toaster.pop(paramsObj.MessageType, paramsObj.MessageTitle, paramsObj.Message);
        }
	}	

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.directive('uploaderModel', uploaderModel);

	uploaderModel.$inject = [
		'$parse'
	];	

	function uploaderModel($parse)
	{
		var directive = {
			link: link
		};

		return directive;

		function link(scope, 
					  iElement, 
					  iAttrs)
		{
			iElement.on('change', function (e)
				{
					$parse(iAttrs.uploaderModel).assign(scope, iElement[0].files[0]);
				}
			);
		}
	}

})();		
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.factory('CRUD.AngularPrj.UserModel', UserModel);

	UserModel.$inject = [
		'CRUD.AngularPrj.AddUserFactory',
        'CRUD.AngularPrj.UpdateUserFactory',
        'CRUD.AngularPrj.ReadUserFactory',
        'CRUD.AngularPrj.DeleteUserFactory'
	];	

	function UserModel(AddUserFactory,
                       UpdateUserFactory,
                       ReadUserFactory,
                       DeleteUserFactory)
	{
        var Model = function(dataDTO)
        {
            var _self = this;

            angular.extend(this, {

                Name : 'felipe',
                Surname: 'tavera',
                Age: 21,
                Email: 'lftavera@hotmail.com',
                ProfilePicture: {},
                UsersList: [],

                AddUser: AddUser,
                GetUserInfoById: GetUserInfoById,
                GetAllUsers: GetAllUsers,
                UpdateUserById: UpdateUserById,
                DeleteUserById: DeleteUserById

            }, dataDTO);

            function AddUser()
            {
                return AddUserFactory.AddNewUser(_self);
            }

            function GetUserInfoById()
            {
                return UpdateUserFactory.GetUserInfoById(
                    {
                        id: _self.Id
                    }
                );
            }

            function GetAllUsers()
            {
                return ReadUserFactory.GetAllUsers();
            }

            function UpdateUserById()
            {
                return UpdateUserFactory.UpdateUserById(_self);
            }

            function DeleteUserById()
            {
                return DeleteUserFactory.DeleteUserById(
                    {
                        id: _self.Id
                    }
                );
            }
        };

		return Model;
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.CreateUserController', CreateUserController);

	CreateUserController.$inject = [
		'CRUD.AngularPrj.Blocks.Utils',
		'CRUD.AngularPrj.UserModel'
	];
	
	function CreateUserController(Utils,
								  UserModel)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userModel = new UserModel();
		
		vm.AddUser = AddUser;
		
		//############ Public Functions ###################

		function AddUser(){

			vm.userModel.AddUser().then(
				responseDTO =>
				{
					if(responseDTO.HasError)
					{
						Utils.ShowErrorMessage(responseDTO.UIMessage);
						return;
					}

					Utils.ShowSuccessMessage(responseDTO.UIMessage);
					ClearAddUserForm();
				},
				error => {
					Utils.ShowErrorMessage('There was an error getting data');
					ClearAddUserForm();
				}
			);
		}

		//############ Private Functions ###################

		
		function ClearAddUserForm()
		{
			vm.userModel = new UserModel();
		}
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.factory('CRUD.AngularPrj.AddUserFactory', AddUserFactory);

	AddUserFactory.$inject = [
		'$http',  
		'$q', 
		'CRUD.AngularPrj.ProjectConstants'
	];
	
	function AddUserFactory($http,  
					  		$q, 
							ProjectConstants)
	{
		var _self = this;

		var service = {
			AddNewUser: AddNewUser
		};

		return service;

		//############ Public Functions ###################
		
		function AddNewUser(addUserModel)
		{
			var defered = $q.defer();

			var url = ProjectConstants.URL_SERVER + "AddUser.php";

			var formData = new FormData();
			formData.append('Name', addUserModel.Name);
			formData.append('Surname', addUserModel.Surname);
			formData.append('Age', addUserModel.Age);
			formData.append('Email', addUserModel.Email);
			formData.append('file', addUserModel.ProfilePicture);

			$http
				.post(url, formData, {
					headers: {
						"Content-type": undefined
					},
					transformRequest: angular.identity
				})
				.then(
					d => {
						defered.resolve(d.data);
					}
				)
				.catch(
					error => {
						defered.reject(err);
					}
				);

			return defered.promise;
		}
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.DeleteUserController', DeleteUserController);

	DeleteUserController.$inject = [
		'$state', 
		'CRUD.AngularPrj.UserModel',
		'CRUD.AngularPrj.Blocks.Utils'
	];
	
	function DeleteUserController($state,
							  	  UserModel,
								  Utils)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userModel = new UserModel();

		vm.GetUserInfoById = GetUserInfoById;
		vm.GoToUserDetail = GoToUserDetail;

		//############ Public Functions ###################	

		function GetUserInfoById()
		{
			vm.userModel.GetUserInfoById().then(
				function(data)
				{
					if(data == 1)
					{
						Utils.ShowErrorMessage('User not found');
						ClearUserModel();
						return;
					} 

					vm.userModel = new UserModel(data[0]);
				}, 
				function(err)
				{
					Utils.ShowErrorMessage(err);
				}
			);	
		}

		function GoToUserDetail(userDetailObj)
		{
			$state.go('app.delete.deleteconfirm',
				{
					userDetail: userDetailObj
				}
			);
		}

		//############ Private Functions ###################

		function ClearUserModel() 
		{
            vm.userModel = new UserModel();
        }
	}

})();		
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.factory('CRUD.AngularPrj.DeleteUserFactory', DeleteUserFactory);

	DeleteUserFactory.$inject = [
		'$http',  
		'$q', 
		'CRUD.AngularPrj.ProjectConstants'
	];
	
	function DeleteUserFactory($http, 
							   $q, 
							   ProjectConstants)
	{
		var _self = this;

		var service = {
			DeleteUserById: DeleteUserById
		};
			
		return service;

		//##### Public Methods #####

		function DeleteUserById(userId)
		{
			var defered = $q.defer();
			var url = ProjectConstants.URL_SERVER + "DeleteUser.php";

			$http.post(url, userId)
			.success(
				function(data)
				{
					defered.resolve(data);
				}
			)
			.error(
				function(err)
				{
					defered.reject(err);
				}
			);

			return defered.promise;
		}
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.DetailUserToDeleteController', DetailUserToDeleteController);

	DetailUserToDeleteController.$inject = [
		'$state', 
		'$stateParams',
		'CRUD.AngularPrj.Blocks.Utils'
	];	

	function DetailUserToDeleteController($state, 
						  			  	  $stateParams,
										  Utils)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userModel = $stateParams.userDetail;

		vm.DeleteUserByIdConfirm = DeleteUserByIdConfirm;

		//############ Public Functions ###################

		function DeleteUserByIdConfirm()
		{
			vm.userModel.DeleteUserById().then(
				function (data)
				{
					Utils.ShowSuccessMessage(data.Message);
					$state.go('app.delete');
				},
				function (err)
				{
					Utils.ShowErrorMessage(err);
					$state.go('app.delete');
				}
			);
		}

		//############ Private Functions ###################

	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.HeaderController', HeaderController);

	HeaderController.$inject = [
		'CRUD.AngularPrj.ReadUserFactory',
		'CRUD.AngularPrj.Blocks.Utils'
	];
	
	function HeaderController(ReadUserFactory,
							  Utils)
	{
		//############ Instance Properties ###################

		var vm = this;

        vm.usersCount = 0;
		
		//############ Public Functions ###################


		//############ Private Functions ###################

        function Initialize()
        {
			ReadUserFactory.GetAllUsers().then(
				responseDTO =>
				{
					if(responseDTO.HasError)
					{
						Utils.ShowErrorMessage(responseDTO.UIMessage);
						return;
					}

					vm.usersCount = responseDTO.ResponseData.length;
				},
				error => {
					Utils.ShowErrorMessage('There was an error getting data');
					console.log(error);
				}
			);
        }

		Initialize();
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.UserDetailController', UserDetailController);

	UserDetailController.$inject = [
		'$stateParams'
	];
	
	function UserDetailController($stateParams)
	{
		var vm = this;

		vm.userDetail = {};

		function Initialize()
		{
			vm.userDetail = $stateParams.userDetail;
		}

		Initialize();
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.ModalDeleteController', ModalDeleteController);

	ModalDeleteController.$inject = [
		'$uibModalInstance', 
		'UserDetail',
		'CRUD.AngularPrj.Blocks.Utils'
	];

	function ModalDeleteController($uibModalInstance,
								   UserDetail,
								   Utils)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userDetail = UserDetail;

		vm.DeleteUserById = DeleteUserById;
		vm.CancelDeleteUser = CancelDeleteUser;

		//############ Public Functions ###################

		function DeleteUserById(id)
		{
			vm.userDetail.DeleteUserById().then(
				function (data)
				{
					Utils.ShowSuccessMessage(data.Message);
					$uibModalInstance.dismiss('cancel');
				},
				function (err)
				{
					Utils.ShowErrorMessage(err);
				}
			);
		}

		function CancelDeleteUser()
		{	
			$uibModalInstance.dismiss('cancel');
		}

		//############ Private Functions ###################
	}
})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.ReadUserController', ReadUserController);

	ReadUserController.$inject = [
		'$state', 
		'$uibModal',
		'CRUD.AngularPrj.Blocks.Utils',
		'CRUD.AngularPrj.UserModel',
		'CRUD.AngularPrj.ReadUserFactory'
	];
	
	function ReadUserController($state, 
								$uibModal, 
								Utils,
								UserModel,
								ReadUserFactory)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userModel = new UserModel();

		vm.UserDetail = UserDetail;
		vm.DeleteUser = DeleteUser;

		//############ Public Functions ###################

		function UserDetail(userObj)
		{
			$state.go('app.read.detail', {userDetail: userObj});
		}

		function DeleteUser(userDetailObj)
		{
			var modalInstance = $uibModal.open(
				{
					templateUrl: 'Client/Templates/read/modalDeleteConfirm.html',
					controller: 'CRUD.AngularPrj.ModalDeleteController',
					controllerAs: 'vm',
					resolve: {
						UserDetail: userDetailObj
					}
				}
			);

		}

		//############ Private Functions ###################

		function Initialize()
		{
			ReadUserFactory.GetAllUsers().then(
				responseDTO =>
				{
					if(responseDTO.HasError)
					{
						Utils.ShowErrorMessage(responseDTO.UIMessage);
						return;
					}

					vm.userModel.UsersList = responseDTO.ResponseData;
				},
				error => 
				{
					Utils.ShowErrorMessage('There was an error getting data');
					console.log(error);
				}
			);
		}

		Initialize();
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.factory('CRUD.AngularPrj.ReadUserFactory', ReadUserFactory);

	ReadUserFactory.$inject = [
		'$http',  
		'$q', 
		'CRUD.AngularPrj.ProjectConstants'
	];
	
	function ReadUserFactory($http,  
							 $q, 
							 ProjectConstants)
	{
		var _self = this;

		var service = {
			GetAllUsers: GetAllUsers
		};

		return service;

		function GetAllUsers()
		{		
			var defered = $q.defer();
			var url = ProjectConstants.URL_SERVER + "GetAllUsers.php";

			$http.get(url)
			.then(
				d => {
					defered.resolve(d.data);
				}
			)
			.catch(
				error => {
					defered.reject(err);
				}
			);

			return defered.promise;
		}
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.controller('CRUD.AngularPrj.UpdateController', UpdateController);

	UpdateController.$inject = [
		'CRUD.AngularPrj.Blocks.Utils',
		'CRUD.AngularPrj.UserModel'
	];	

	function UpdateController(Utils,
							  UserModel)
	{
		//############ Instance Properties ###################

		var vm = this;

		vm.userModel = new UserModel();
		
		vm.GetUserInfoById = GetUserInfoById;
		vm.UpdateUserById = UpdateUserById;

		//############ Public Functions ###################

		function GetUserInfoById(){

			vm.userModel.GetUserInfoById().then(
				function(data)
				{
					if(data == 1)
					{
						Utils.ShowErrorMessage('User not found');
						ClearUserModel();
						return;
					}

					vm.userModel = new UserModel(data[0]);
				}, 
				function(err){
					Utils.ShowErrorMessage(err);
					ClearUserModel();
				}
			);
		}

		function UpdateUserById(){
			
			vm.userModel.UpdateUserById().then(
				function(data)
				{
					Utils.ShowSuccessMessage(data.Message);
					ClearUserModel();
				}, 
				function(err)
				{
					Utils.ShowErrorMessage(err);
					ClearUserModel();	
				}
			);
		}

		//############ Private Functions ###################

		function ClearUserModel()
		{
			vm.userModel = new UserModel();
		}
	}

})();
(function(){

	'use strict';

	angular
		.module('CRUD.AngularPrj.App')
		.service('CRUD.AngularPrj.UpdateUserFactory', UpdateUserFactory);

	UpdateUserFactory.$inject = [
		'$http',  
		'$q', 
		'CRUD.AngularPrj.ProjectConstants'
	];
	
	function UpdateUserFactory($http,  
						 	   $q, 
						 	   ProjectConstants)
	{
		var _self = this;
		
		var service = {
			GetUserInfoById: GetUserInfoById,
			UpdateUserById: UpdateUserById
		};

		function GetUserInfoById(userDataObj){
				
				var defered = $q.defer();
				var url = ProjectConstants.URL_SERVER + "getUserByID.php";

				$http.post(url, angular.toJson(userDataObj))
				.success(
					function(data)
					{
						defered.resolve(data);
					}
				)
				.error(
					function(err)
					{
						defered.reject(err);
					}
				);

				return defered.promise;
		}

		function UpdateUserById(userDataObj){
			
			var defered = $q.defer();
			var url = ProjectConstants.URL_SERVER + "updateUser.php";

			$http.post(url, angular.toJson(userDataObj))
			.success(
				function(data)
				{
					defered.resolve(data);
				}
			)
			.error(
				function(err)
				{
					defered.reject(err);
				}
			);

			return defered.promise;
		}

	}
})();